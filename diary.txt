########################################################################
#DATE       #START      #STOP       #DESCRIPTION                       #
########################################################################

5/7/19      16:00       19:00       Official start of coding
                                    Discovering reference implementation behaviour
                                    Looking for error messages, exit statuses and
                                    where error messages are sent to (stderr) 
                                    
            21:00       00:00       Finished up to legit-log
                                    Need to test code


6/7/19      13:00       18:00       Making init, add, commit, log work together

            10:30       00:00       Finishing up legit-show
            
7/7/19      13:30       15:30       Looking for all the types of input errors 
                                    and handling them based off reference
                                    Finished subset 0, need to fix errors








#######################################################################

Reference implementation

----------------------- Subset 0 ---------------------------------------

legit-init:

    - If .legit directory already exists are you use legit-init, error message = "legit-init: error: .legit already exists"
      exit status = 1
      #Note: i used $0 to do "legit-init:" --> change this to hardcode if it doesnt pass autotest
    - If you specify a command line argument legit-init hello, error message = "usage: legit-init"
      (this takes precedence over 1st error)
      exit status = 1
    - 2041 legit-init writes error messages to stderr NOT stdout
      QUESTION: Whats the difference between >&2 and 1>&2

legit-add:
    - ALWAYS check for each command whether .legit exists otherwise => this error gets checked first
      print error msg = "legit-add: error: no .legit directory containing legit repository exists"
    - Types of add errors for files
        - usage: legit-add <filenames>
        - legit-add: error: can not open '...'
        - legit-add: error: '...' is not a regular file
        - legit-add: error: invalid filename '...'
            - if given multiple file names to add and one of the filenames are invalid, none of the files are added
            
legit-commit -m "message":
    - Types of errors (in order of precedence)
        - legit-commit: error: commit message can not contain a newline
        
        - Sample inputs (2041 legit-commit | 2041 legit-commit -m | 2041 legit-commit "hello" | 2041 legit-commit -v "hello")
          Error msg = usage: legit-commit [-a] -m commit-message        

        
        - When no files have been added to staging = "nothing to commit"
    - 2041 legit-commit -m "hello"there produces "nothing to commit"
    
    
If you change the contents of file e.g. echo "new line" > a.txt
then change it back to original contents of the file e.g. echo "a" > a.txt, nothing happens --> no need to commit



legit-log:
    - Types of errors
        - legit-log: error: your repository does not have any commits yet
        - When given more than one cmd args
          usage: legit-log
        - 

legit-show:
    - Errors:
        - legit-show: error: your repository does not have any commits yet
        - If cmd args != 1 
          usage: legit-show <commit>:<filename>
        - if number < 0
          usage: legit-show <commit>:<filename>
        - When ':' is not used
          legit-show: error: invalid object '...'
        - if commit number exceeds total commits or commit number is a string
          legit-show: error: unknown commit '...'
        - When ':' is passed in only
          legit-show: error: invalid filename ''
        - If file does not exist in the commit number (note: wrong commit number takes precedence)
          legit-show: error: '...' not found in commit "number"
          
          OR file does not exist in index by specifying ':a.txt'
          legit-show: error: '...' not found in index


   
   - If given no commit number, print contents in the file that is currently in staging area

